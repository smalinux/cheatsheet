################################################################################
#
# Buildroot Workflow
#
################################################################################

Step 00:
   list all available startup boards: `configs/*`
     make list-defconfigs

Step 01:
   Startup template for any board (ex: `beaglebone`):
     make beaglebone_defconfig

Step 02:
   Add your custom touch:
   Into default Buildroot Tree:
     make menuconfig

   Or (optional) Building out-of-tree ?:
     make O=/tmp/build menuconfig


      h   - help text for every single option.
      /   - search with number to quick jump.


Step 03:
   (optional) Offline builds
     make source

Step 04:
   Take backup (& git push) from the generated .config file:
     cp .config config_$(date +%Y%m%d.%H%M)

Step 05:
   Get/Use external toolchain to speed up the building process.
     Toolchain > Toolchain Type > External toolchain

   Other external toolchain options:
     - crosstool-NG
     - your repo package manager
     - Linaro for ARM
     - Sourcery CodeBench for ARM

Step 06:
   /dev management

Step 07:
   Init System:
     $ make menuconfig > `System configuration` >Â `Init system` > "BusyBox"

Step 08:
   Configuration of other components

   List all available components/targets:
     make help

   Edit:
     make busybox-menuconfig

   each component has default config file on its own:
     ex: vim .config
     BR2_PACKAGE_BUSYBOX_CONFIG     => BusyBox

Step 09:
   Start the build process, run:
     make

   Or (optional) with Environment variables:
     make HOSTCXX=g++-4.3-HEAD HOSTCC=gcc-4.3-HEAD

Step 10:
   clean single package:
     make htop-dirclean
   rebuild packages:
     make htop-dirclean # rm dir > extract dir > config > compile > install
     make htop-reconfigure # config > compile > install
     make htop-rebuild # compile > install

Step 99:
   Take AGAIN backup from the generated .config file:
     cp .config config_$(date +%Y%m%d.%H%M)

   *NOTE* Use Build outside the tree as versions & concat date with its
     name & use version control to track changes...

Step 100:
   Resetting Buildroot for a new target:
   Delete all build products as well as the configuration:
     make distclean


Dry Run ~alike~:
   make V=1 <bla>

Build docs:
   make manual-clean
   make manual

Query make vars:
   make -s printvars VARS=BR2_PACKAGE_BUSYBOX_CONFIG

Full rebuild:
   make clean all

Extract config as:
   JSON:
     make show-info

   PDF:
     make pkg-stats


Graphing:
   between ALL packages:
     make graph-depends

   single package:
     make glibc-graph-depends

   the build duration:
     make graph-build

   the filesystem size contribution of packages:
     make graph-size




################################################################################
#
# Top-level `make` steps:
#
################################################################################

- download source files (as required);
- configure, build and install the cross-compilation toolchain, or simply import an external toolchain;
- configure, build and install selected target packages;
- build a kernel image, if selected;
- build a bootloader image, if selected;
- create a root filesystem in selected formats.













