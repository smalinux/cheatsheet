# device tree
# device drivers
# Linux Kernel Memory Allocation
# IIO framework
# pin control
# GPIO systems
# Resources
-------------------------------------------------------------------------------


Linux Source Code
=
git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git
https://www.kernel.org/


###############################################################################
#
# device tree
#
###############################################################################

#include <linux/of.h>
#include <linux/of_device.h>

.config:
=
CONFIG_OF


Google: device tree vs ACPI

Extra:
   OF subsystem
   ~/repos/linux/drivers/of/


#
# Platform Devices Framework
#

# platform core abstraction

platform devices
platform driver
platform bus

struct platform_device # <linux/platform_device.h>
struct platform_driver # <linux/platform_device.h>


###############################################################################
#
# device drivers
#
###############################################################################

Linux Device Model (LDM)

struct device        # include/linux/device.h
struct bus_type      # include/linux/device/bus.h
struct device_driver # include/linux/device/driver.h



Tree:
===
struct device
   struct i2c_client (i2c_client->dev)
   struct spi_device (spi_device->dev)
   struct usb_device (usb_device->dev)
   struct platform_device (platform_device->dev)
      include/linux/mod_devicetable.h (spi_device->id_table)

struct device_driver


struct bus_type
   aka bus controller
   aka root driver

   Physically speaking, a bus is a channel between the processor and one or
   more devices. From a software point of view, the bus (struct bus_type) is
   the link between devices (struct device) and drivers (struct device_driver).

   $ tree /sys/bus/





###############################################################################
#
# Linux Kernel Memory Allocation
#
###############################################################################


Google Images: CONFIG_PAGE_OFFSET

arch/arm/Kconfig:
   CONFIG_VMSPLIT_1G
   CONFIG_VMSPLIT_2G
   CONFIG_VMSPLIT_3G_OPT


struct mm_struct # include/linux/mm_types.h



###############################################################################
#
# IIO framework
#
###############################################################################

https://www.kernel.org/doc/html/v4.12/driver-api/iio/index.html
Google: IIO Framework


The IIO model is based on device and channel architecture:
   • The device represents the chip itself, the top level of the hierarchy.
   • The channel represents a single acquisition line of the device. A device
   may have one or more channels. For example, an accelerometer is a device
   with three channels, one for each axis (x, y, and z).

IIO APIs are spread over several header files, as follows:
   #include <linux/iio/iio.h>     /* mandatory, the core */
   #include <linux/iio/sysfs.h>   /* mandatory since sysfs is used */
   #include <linux/iio/events.h>  /* Optional. Advanced feature, to manage iio events */
   #include <linux/iio/buffer.h>  /* mandatory for triggered buffers */
   #include <linux/iio/trigger.h> /* rarely used. Only if the driver implements a trigger */



###############################################################################
#
# pin control
#
###############################################################################



###############################################################################
#
# GPIO systems
#
###############################################################################











###############################################################################
#
# Resources
#
###############################################################################

#
# AR
#

https://www.linkedin.com/in/abdallahali/recent-activity/all/
https://www.youtube.com/@abdallahaliabdallah6394/playlists
https://www.youtube.com/@ahmedeldeep/playlists
https://www.facebook.com/groups/1619119604820781/

#
# EN
#
https://www.udemy.com/course/embedded-linux-step-by-step-using-beaglebone/
https://bootlin.com/blog/bootlin-embedded-linux-course-now-available-on-beagleplay/

#
# Hackernews
#


























